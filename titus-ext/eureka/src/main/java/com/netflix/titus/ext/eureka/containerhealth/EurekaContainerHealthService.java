package com.netflix.titus.ext.eureka.containerhealth;

import java.util.List;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import javax.inject.Inject;
import javax.inject.Singleton;

import com.google.common.base.Preconditions;
import com.netflix.appinfo.InstanceInfo;
import com.netflix.discovery.EurekaClient;
import com.netflix.discovery.EurekaEvent;
import com.netflix.discovery.EurekaEventListener;
import com.netflix.titus.api.containerhealth.model.ContainerHealthState;
import com.netflix.titus.api.containerhealth.model.ContainerHealthStatus;
import com.netflix.titus.api.containerhealth.model.event.ContainerHealthChangeEvent;
import com.netflix.titus.api.containerhealth.model.event.ContainerHealthEvent;
import com.netflix.titus.api.containerhealth.service.ContainerHealthService;
import com.netflix.titus.api.jobmanager.model.job.Task;
import com.netflix.titus.api.jobmanager.model.job.event.JobManagerEvent;
import com.netflix.titus.api.jobmanager.model.job.event.TaskUpdateEvent;
import com.netflix.titus.api.jobmanager.service.ReadOnlyJobOperations;
import com.netflix.titus.common.runtime.TitusRuntime;
import com.netflix.titus.common.util.CollectionsExt;
import com.netflix.titus.common.util.rx.ReactorExt;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import reactor.core.publisher.Flux;

@Singleton
public class EurekaContainerHealthService implements ContainerHealthService {

    private static final Logger logger = LoggerFactory.getLogger(EurekaContainerHealthService.class);

    public static final String NAME = "eureka";

    private final ReadOnlyJobOperations jobOperations;
    private final EurekaClient eurekaClient;
    private final TitusRuntime titusRuntime;

    private final Flux<ContainerHealthEvent> healthStatuses;

    @Inject
    public EurekaContainerHealthService(ReadOnlyJobOperations jobOperations, EurekaClient eurekaClient, TitusRuntime titusRuntime) {
        this.jobOperations = jobOperations;
        this.eurekaClient = eurekaClient;
        this.titusRuntime = titusRuntime;

        Flux<EurekaEvent> eurekaCallbacks = ReactorExt.fromListener(
                h -> eurekaClient.registerEventListener((EurekaEventListener) h),
                h -> eurekaClient.unregisterEventListener((EurekaEventListener) h)
        );

        this.healthStatuses = Flux.defer(() -> {
            ConcurrentMap<String, ContainerHealthEvent> current = new ConcurrentHashMap<>();
            return Flux.merge(eurekaCallbacks, ReactorExt.toFlux(jobOperations.observeJobs()))
                    .flatMap(event -> handleStatusUpdate(event, current));
        }).share();
    }

    @Override
    public String getName() {
        return NAME;
    }

    @Override
    public Optional<ContainerHealthStatus> findHealthStatus(String taskId) {
        return jobOperations.findTaskById(taskId).map(jobAndTaskPair -> buildHealthStatus(jobAndTaskPair.getRight()));
    }

    @Override
    public Flux<ContainerHealthEvent> events(boolean snapshot) {
        Preconditions.checkArgument(!snapshot, "Snapshot state is generated by AggregatingContainerHealthService");
        return healthStatuses;
    }

    private ContainerHealthStatus buildHealthStatus(Task task) {
        return ContainerHealthStatus.newBuilder()
                .withTaskId(task.getId())
                .withTimestamp(titusRuntime.getClock().wallTime())
                .withState(takeStateOf(task)).build();
    }

    private ContainerHealthStatus buildHealthStatus(Task task, ContainerHealthState state) {
        return ContainerHealthStatus.newBuilder()
                .withTaskId(task.getId())
                .withTimestamp(titusRuntime.getClock().wallTime())
                .withState(state).build();
    }

    private ContainerHealthState takeStateOf(Task task) {
        List<InstanceInfo> instances = eurekaClient.getInstancesById(task.getId());

        ContainerHealthState state;
        if (CollectionsExt.isNullOrEmpty(instances)) {
            state = ContainerHealthState.Unknown;
        } else {
            InstanceInfo instance = instances.get(0);
            state = instance.getStatus() == InstanceInfo.InstanceStatus.UP
                    ? ContainerHealthState.Healthy
                    : ContainerHealthState.Unhealthy;
        }
        return state;
    }

    private Flux<ContainerHealthEvent> handleStatusUpdate(Object event, ConcurrentMap<String, ContainerHealthEvent> state) {
        if (event instanceof JobManagerEvent) {
            return handleJobEvent((JobManagerEvent) event, state);
        }
        if (event instanceof EurekaEvent) {
            return handleEurekaEvent((EurekaEvent) event, state);
        }
        return Flux.empty();
    }

    private Flux<ContainerHealthEvent> handleJobEvent(JobManagerEvent event, ConcurrentMap<String, ContainerHealthEvent> state) {
        if (!(event instanceof TaskUpdateEvent)) {
            return Flux.empty();
        }

        TaskUpdateEvent taskEvent = (TaskUpdateEvent) event;
        Task task = taskEvent.getCurrentTask();

        ContainerHealthChangeEvent lastEvent = (ContainerHealthChangeEvent) state.get(task.getId());
        if (lastEvent == null) {
            ContainerHealthChangeEvent newEvent = ContainerHealthEvent.healthChanged(buildHealthStatus(task));
            state.put(task.getId(), newEvent);
            return Flux.just(newEvent);
        }

        ContainerHealthState newTaskState = takeStateOf(task);
        if (lastEvent.getContainerHealthStatus().getState() == newTaskState) {
            return Flux.empty();
        }
        ContainerHealthChangeEvent newEvent = ContainerHealthEvent.healthChanged(buildHealthStatus(task, newTaskState));
        state.put(task.getId(), newEvent);
        return Flux.just(newEvent);
    }

    private Flux<ContainerHealthEvent> handleEurekaEvent(EurekaEvent event, ConcurrentMap<String, ContainerHealthEvent> state) {
        return null;
    }
}

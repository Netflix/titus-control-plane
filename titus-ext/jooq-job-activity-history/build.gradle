/*
* Copyright 2021 Netflix, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

plugins {
    id 'nu.studer.jooq' version '3.0.2'
    id 'org.flywaydb.flyway' version '6.5.6'
}

apply plugin: 'nu.studer.jooq'
apply plugin: 'org.flywaydb.flyway'

apply from: '../../jooq.gradle'
ext.dbProfile = "jobactivity"

dependencies {
    compile "org.springframework:spring-web:${springVersion}"
    compile "org.springframework.boot:spring-boot:${springBootVersion}"

    compile project(':titus-common')
    compile project(':titus-api')
    compile project(':titus-server-runtime')
    compile project(':titus-supplementary-component-job-activity-history')
    compile project(':titus-ext-jooq-common')
    compile project(':titus-ext-jooq-activity-queue')

    implementation("org.jooq:jooq:${jooqVersion}")

    // DB -  Drivers
    compile "org.postgresql:postgresql:${psql}"

    // DB - jOOQ
    compile "org.jooq:jooq:${jooqVersion}"
    compile "org.jooq:jooq-meta:${jooqVersion}"
    compile "org.jooq:jooq-codegen:${jooqVersion}"

    // Flyway
    compile "org.flywaydb:flyway-core:${flywayVersion}"

    compile 'com.opentable.components:otj-pg-embedded:0.13.+'
    jooqRuntime 'org.postgresql:postgresql:42.2.4'

    // Hikari DataSource for connection pooling to the DB
    compile 'com.zaxxer:HikariCP:3.2.0'
    compile project(':titus-server-runtime')

    testCompile project(':titus-testkit')
}

// This partial configuration is needed so gradle recognizes jooq -> generateActivityJooqSchemaSource task for dev environments
jooq {
    println 'setup first'
    version = '3.13.2'
    activity(sourceSets.main) {
        // ... This will be populated in the startDb method
    }
}

task startFlyway {
    group 'Flyway'
    doFirst {
        flyway {
            driver = 'org.postgresql.Driver'
            url = project.property('jdbcUrl')
            user = project.property('jdbcUser')
            password = project.property('jdbcPassword')
            schemas = ['jobactivity']
            locations = ['filesystem:src/main/resources/db/migration/jobactivity']
            println 'Flyway Configuration for migrating job activity tables'
            println '=========================================='
            println 'jdbcUrl:  ' + url
            println 'user      ' + user
            println 'password: ' + password
            println 'schemas:  ' + schemas
            println '=========================================='
        }
        jooq {
            println 'Setting up JOOQ Configuration'
            println '============================='
            version = '3.13.2'
            activity(sourceSets.main) {
                jdbc {
                    url = project.property('jdbcUrl')
                    user = project.property('jdbcUser')
                    password = project.property('jdbcPassword')
                }
                generator {
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        includes = '(jobactivity).*'
                        excludes = ''
                        recordVersionFields = 'rec_version'
                    }
                    target {
                        packageName = 'com.netflix.titus.ext.jobactivity'
                    }
                    generate {
                        daos = true
                        interfaces = true
                        immutablePojos = false
                        fluentSetters = true
                        pojosEqualsAndHashCode = true
                    }
                    strategy {
                        name = null
                        matchers {
                            tables {
                                table {
                                    pojoClass {
                                        transform = 'PASCAL'
                                        // All Jooq Pojo Classess will suffixed with JooqPojo
                                        expression = '\$0_Jooq_Pojo'
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

// Setup dependence graph such that DB is up before migration and JOOQ code generation is attempted and the DB is shutdown as cleanup.
startFlyway.dependsOn startDb
flywayInfo.dependsOn startFlyway
flywayMigrate.dependsOn flywayInfo
flywayMigrate.finalizedBy stopDb
flywayInfo.finalizedBy stopDb
generateActivityJooqSchemaSource.dependsOn flywayMigrate
generateActivityJooqSchemaSource.finalizedBy stopDb

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-netflixoss-project-plugin:4.0.0'
        classpath 'com.netflix.nebula:nebula-ospackage-plugin:3.+'
    }
}

allprojects {
    apply plugin: 'nebula.netflixoss'
    apply plugin: 'nebula.dependency-lock'
    apply plugin: 'idea'

    if (project.hasProperty('useMavenLocal')) {
        repositories {
            mavenLocal()
        }
    }

    repositories {
        jcenter()
        maven { url 'https://dl.bintray.com/netflixoss/oss-candidate/' }
        maven {
            url 'https://titusoss.bintray.com/maven'
            credentials {
                username resolveTitusOssUserName()
                password resolveTitusOssUserPassword()
            }
        }
    }

    bintray {
        pkg {
            repo = 'maven'
            userOrg = 'titusoss'
            version {
                mavenCentralSync {
                    sync = false
                }
            }
        }
    }

    project.tasks.withType(org.jfrog.gradle.plugin.artifactory.task.BuildInfoBaseTask) { Task task ->
        task.enabled = false
    }
}

subprojects {
    group "io.netflix.titus"

    apply plugin: 'java'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    ext {
        titusApiDefinitionsVersion = '0.0.1-rc+'

        awsSdkVersion = '1.11.+'
        javaxElVersion = '3.+'
        springVersion = '4.3.9.RELEASE'
        javaxInjectVersion = '1'
        guavaVersion = '19.+'
        servletVersion = '3.1.0'
        rxJava = '1.+'
        rxnettyVersion = '0.4.+'
        hdrhistogramVersion = '2.1.+'
        apacheCommonsCliVersion = '1.3.+'
        archaius2Version = '2.2.+'
        eurekaVersion = '1.+'
        numerusVersion = '1.1'
        snappyVersion = '1.1.+'
        jacksonVersion = '2.8.7'
        slf4jVersion = '1.7.0'
        cliParserVersion = '1.1.1'
        curatorVersion = '2.11.0'
        governatorVersion = '1.15.+'
        jettyVersion = '9.2.12.v20150709'
        jerseyVersion = '1.19.1'
        fenzoVersion = '1.1.0-rc.1'
        spectatorVersion = '0.59.+'
        mesosVersion = '1.1.3'
        protobufVersion = '3.3.+'
        grpcVersion = '1.3.+'
        swaggerVersion = '1.5.12'
        jsonVersion = '20140107'
        zkVersion = '0.4'
        guiceVersion = '4.1.+'
        hibernateValidatorVersion = '5.4.+'
        runtimeHealthVersion = '1.1.+'
        configMagicVersion = '0.11'
        swaggerUiVersion = '2.1.4'
        okHttpVersion = '3.8.0'
        cassandraDriverVersion = '3.3.+'
        commonsCliVersion = '1.3.+'
        elasticsearchVersion = '2.4.2'
        caffeineVersion = '2.6.+'

        // Test
        junitVersion = '4.10'
        mockitoVersion = '2.+'
        hamcrestVersion = '1.3'
        awaitilityVersion = '1.7.0'
        assertjVersion = '3.8.0'
        cassandraUnitVersion = '3.1.1.0'
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << '-parameters'
    }

    tasks.withType(Javadoc).all {
        enabled = false
    }

    // There is some clean up in our transitive dependencies that we need to do here.
    configurations.all {
        exclude group: 'netflix', module: 'SRWrapper'
        exclude group: 'org.apache.ant', module: 'ant'
        exclude group: 'org.apache.cxf', module: 'cxf'
        exclude group: 'javax.servlet', module: 'servlet-api'
        exclude group: 'org.mortbay.jetty', module: 'servlet-api'
        // Superceded by governator-api
        exclude group: 'com.netflix.governator', module: 'governator-annotations'
        resolutionStrategy {
            force 'com.google.protobuf:protobuf-java:3.3.0'
            force 'com.google.protobuf:protobuf-java-util:3.3.0'
            force 'com.google.guava:guava:19.0'
        }
    }

    dependencies {
        compile "org.slf4j:slf4j-api:${slf4jVersion}"
        runtime "org.slf4j:slf4j-log4j12:${slf4jVersion}"

        testCompile "junit:junit-dep:${junitVersion}"
        testCompile "org.mockito:mockito-core:${mockitoVersion}"
        testCompile "org.hamcrest:hamcrest-core:${hamcrestVersion}"
        testCompile "com.jayway.awaitility:awaitility:${awaitilityVersion}"

        testCompile "org.assertj:assertj-core:${assertjVersion}"
    }

    test {
        useJUnit {
            excludeCategories 'io.netflix.titus.testkit.junit.category.IntegrationTest'
        }

        reports {
            junitXml.enabled = true
            html.enabled = true
        }
    }

    task testAll(type: Test) {
        useJUnit {
        }

        reports {
            junitXml.enabled = true
            html.enabled = true
        }
    }
}

dependencyLock {
    includeTransitives = true
}

def resolveTitusOssUserName() {
    def secret = file('root/metatron/decrypted/Bintray-TitusOSS')
    if (project.hasProperty('titusUsername')) {
        return project.property('titusUsername')
    }
    if (secret.exists()) {
        return 'titusbintrayprivate'
    }
    throw new GradleException("TitusOSS Bintray credentials missing")
}

def resolveTitusOssUserPassword() {
    def secret = file('root/metatron/decrypted/Bintray-TitusOSS')
    if (project.hasProperty('titusUsername')) {
        return project.hasProperty('titusPassword') ? project.property('titusPassword') : 'passwordnotset'
    }
    if (secret.exists()) {
        return secret.text.trim()
    }
    throw new GradleException("TitusOSS Bintray credentials missing")
}

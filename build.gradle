buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-netflixoss-project-plugin:5.0.0'
        classpath 'com.netflix.nebula:nebula-ospackage-plugin:3.+'
    }
}

allprojects {
    apply plugin: 'nebula.netflixoss'
    apply plugin: 'nebula.dependency-lock'
    apply plugin: 'idea'

    if (project.hasProperty('useMavenLocal')) {
        repositories {
            mavenLocal()
        }
    }

    repositories {
        jcenter()
        maven { url 'https://dl.bintray.com/netflixoss/oss-candidate/' }
    }

    project.tasks.withType(org.jfrog.gradle.plugin.artifactory.task.BuildInfoBaseTask) { Task task ->
        task.enabled = false
    }
}

subprojects {
    group "com.netflix.titus"

    apply plugin: 'java'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    ext {
        titusApiDefinitionsVersion = '0.0.1-rc+'

        awsSdkVersion = '1.11.+'
        javaxElVersion = '3.+'
        springVersion = '4.3.9.RELEASE'
        javaxInjectVersion = '1'
        guavaVersion = '20.+'
        servletVersion = '3.1.0'
        rxJava = '1.+'
        rxnettyVersion = '0.4.+'
        hdrhistogramVersion = '2.1.+'
        apacheCommonsCliVersion = '1.3.+'
        archaius2Version = '2.3.+'
        eurekaVersion = '1.+'
        numerusVersion = '1.1'
        snappyVersion = '1.1.+'
        jacksonVersion = '2.8.7'
        slf4jVersion = '1.7.0'
        cliParserVersion = '1.1.1'
        curatorVersion = '2.11.0'
        governatorVersion = '1.15.+'
        jettyVersion = '9.2.12.v20150709'
        jerseyVersion = '1.19.1'
        fenzoVersion = '1.1.0-rc.3'
        spectatorVersion = '0.59.+'
        mesosVersion = '1.3.2'
        protobufVersion = '3.5.+'
        springReactor = '3.1.+'
        springReactorNetty = '0.7.+'
        grpcVersion = '1.10.+'
        swaggerVersion = '1.5.12'
        jsonVersion = '20140107'
        zkVersion = '0.4'
        guiceVersion = '4.1.+'
        hibernateValidatorVersion = '5.4.+'
        runtimeHealthVersion = '1.1.+'
        configMagicVersion = '0.11'
        swaggerUiVersion = '2.1.4'
        okHttpVersion = '3.8.0'
        cassandraDriverVersion = '3.3.+'
        commonsCliVersion = '1.3.+'
        elasticsearchVersion = '2.4.2'
        caffeineVersion = '2.6.+'
        rxJavaInteropVersion = '0.13.2'


        // Test
        junitVersion = '4.10'
        mockitoVersion = '2.+'
        hamcrestVersion = '1.3'
        awaitilityVersion = '1.7.0'
        assertjVersion = '3.8.0'
        cassandraUnitVersion = '3.1.1.0'
        mockServerVersion = '3.10.4'
        javaslangVersion = '2.0.6'
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << '-parameters'
    }

    tasks.withType(Javadoc).all {
        enabled = false
    }

    // There is some clean up in our transitive dependencies that we need to do here.
    configurations.all {
        exclude group: 'netflix', module: 'SRWrapper'
        exclude group: 'org.apache.ant', module: 'ant'
        exclude group: 'org.apache.cxf', module: 'cxf'
        exclude group: 'javax.servlet', module: 'servlet-api'
        exclude group: 'org.mortbay.jetty', module: 'servlet-api'
        // Superceded by governator-api
        exclude group: 'com.netflix.governator', module: 'governator-annotations'
        resolutionStrategy {
            force 'org.bouncycastle:bcprov-jdk15on:1.50'
        }
    }

    dependencies {
        compile "org.slf4j:slf4j-api:${slf4jVersion}"
        runtime "org.slf4j:slf4j-log4j12:${slf4jVersion}"

        testCompile "junit:junit-dep:${junitVersion}"
        testCompile "org.mockito:mockito-core:${mockitoVersion}"
        testCompile "org.hamcrest:hamcrest-core:${hamcrestVersion}"
        testCompile "com.jayway.awaitility:awaitility:${awaitilityVersion}"
        testCompile "io.projectreactor:reactor-test:${springReactor}"

        testCompile "org.assertj:assertj-core:${assertjVersion}"
    }

    test {
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

        useJUnit {
            excludeCategories 'com.netflix.titus.testkit.junit.category.IntegrationTest', 'com.netflix.titus.testkit.junit.category.IntegrationNotParallelizableTest'
        }

        reports {
            junitXml.enabled = true
            html.enabled = true
        }

        def stdout = new LinkedList<String>()
        beforeTest {
            stdout.clear()
        }

        onOutput { td, toe ->
            stdout.addAll(toe.getMessage().split('(?m)$'))
        }

        afterTest { td, tr ->
            if (tr.resultType == TestResult.ResultType.FAILURE && stdout.size() > 0) {
                println()
                println("${td.className}.${td.name} failed, output:")
                stdout.each { print(it) }
            }
        }
    }

    task integrationTest(type: Test) {
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

        useJUnit {
            includeCategories 'com.netflix.titus.testkit.junit.category.IntegrationTest'
        }

        reports {
            junitXml.enabled = true
            html.enabled = true
        }

        def stdout = new LinkedList<String>()
        beforeTest {
            stdout.clear()
        }

        onOutput { td, toe ->
            stdout.addAll(toe.getMessage().split('(?m)$'))
        }

        afterTest { td, tr ->
            if (tr.resultType == TestResult.ResultType.FAILURE && stdout.size() > 0) {
                println()
                println("${td.className}.${td.name} failed, output:")
                stdout.each { print(it) }
            }
        }
    }

    task integrationNotParallelizableTest(type: Test) {
        useJUnit {
            includeCategories 'com.netflix.titus.testkit.junit.category.IntegrationNotParallelizableTest'
        }

        reports {
            junitXml.enabled = true
            html.enabled = true
        }

        def stdout = new LinkedList<String>()
        beforeTest {
            stdout.clear()
        }

        onOutput { td, toe ->
            stdout.addAll(toe.getMessage().split('(?m)$'))
        }

        afterTest { td, tr ->
            if (tr.resultType == TestResult.ResultType.FAILURE && stdout.size() > 0) {
                println()
                println("${td.className}.${td.name} failed, output:")
                stdout.each { print(it) }
            }
        }
    }

    task testAll {
        dependsOn 'test'
        dependsOn 'integrationTest'
        dependsOn 'integrationNotParallelizableTest'
        tasks.findByName('integrationTest').mustRunAfter 'test'
        tasks.findByName('integrationNotParallelizableTest').mustRunAfter 'integrationTest'
    }
}

dependencyLock {
    includeTransitives = true
}

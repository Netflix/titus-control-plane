buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        // force a more recent spring since some nebula plugins were bringing an older version
        // before springboot plugins had any saying
        classpath "org.springframework:spring-core:5.2.8.RELEASE"
    }
}

plugins {
    id 'nebula.netflixoss' version '8.7.0'
    id 'nebula.ospackage' version '8.1.0'
}

ext.useMavenLocal = project.hasProperty('useMavenLocal') ? project.getProperty('useMavenLocal').toBoolean() : false
ext.integrationTestScope = project.hasProperty('integrationTestScope') ? project.getProperty('integrationTestScope') : ""

allprojects {
    apply plugin: 'nebula.dependency-lock'
    apply plugin: 'idea'

    if (useMavenLocal) {
        repositories {
            mavenLocal()
        }
    }

    repositories {
        jcenter()
        maven { url 'https://dl.bintray.com/netflixoss/oss-candidate/' }
    }
}

subprojects {
    buildscript {
        repositories {
            jcenter()
            mavenCentral()
            maven { url 'https://plugins.gradle.org/m2/' }
        }
        dependencies {
            classpath "org.springframework:spring-core:5.2.6.RELEASE"
        }
    }

    group "com.netflix.titus"

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'nebula.netflixoss'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    ext {
        titusApiDefinitionsVersion = '0.0.1-rc73'

        awsSdkVersion = '1.11.+'
        javaxElVersion = '3.+'
        springVersion = '5.2.8.RELEASE'
        springSecurityVersion = '5.3.3.RELEASE'
        springBootVersion = '2.3.2.RELEASE'
        springCloudVersion = '2.2.+'
        springReactor = '3.3.9.RELEASE'
        springReactorAdapter = '3.3.3.RELEASE'
        springReactorNetty = '0.9.11.RELEASE'
        javaxInjectVersion = '1'
        guavaVersion = '25.1-jre'
        servletVersion = '3.1.0'
        rxJava = '1.+'
        hdrhistogramVersion = '2.1.+'
        hsqldbVersion = '2.4.+'
        apacheCommonsCliVersion = '1.3.+'
        archaius2Version = '2.3.+'
        eurekaVersion = '1.+'
        numerusVersion = '1.1'
        snappyVersion = '1.1.+'
        jacksonVersion = '2.10.+'
        slf4jVersion = '1.7.0'
        cliParserVersion = '1.1.1'
        curatorVersion = '2.13.+'
        governatorVersion = '1.15.+'
        jettyVersion = '9.2.12.v20150709'
        jerseyVersion = '1.19.+'
        jooqVersion = '3.11.+'
        fenzoVersion = '1.1.0-rc.9'
        spectatorVersion = '0.59.+'
        mesosVersion = '1.7.2'
        protobufVersion = '3.7.+'
        postgresqlVersion = '42.2.9'
        grpcVersion = '1.20.+'
        protobufJavaUtilVersion = '3.5.+'
        googleTruthVersion = '0.34' // pinned to avoid a transitive dependency on guava > 20.x
        swaggerVersion = '1.5.12'
        jsonVersion = '20140107'
        guiceVersion = '4.1.+'
        hibernateValidatorVersion = '5.4.+'
        runtimeHealthVersion = '1.1.+'
        configMagicVersion = '0.11'
        swaggerUiVersion = '2.1.4'
        okHttpVersion = '3.+'
        cassandraDriverVersion = '3.3.+'
        commonsCliVersion = '1.3.+'
        caffeineVersion = '2.6.+'
        rxJavaInteropVersion = '0.13.+'
        kubernetesClientVersion = '8.0.0'
        commonsMath3Version = '3.6.1'
        friggaVersion = '0.+'

        // Test
        junitVersion = '4.+'
        mockitoVersion = '2.+'
        hamcrestVersion = '1.3'
        awaitilityVersion = '1.7.0'
        assertjVersion = '3.8.0'
        cassandraUnitVersion = '3.1.1.0'
        mockServerVersion = '3.10.4'
        javaslangVersion = '2.0.6'
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << '-parameters'
    }

    tasks.withType(Javadoc).all {
        enabled = false
    }

    // There is some clean up in our transitive dependencies that we need to do here.
    configurations.all {
        exclude group: 'netflix', module: 'SRWrapper'
        exclude group: 'org.apache.ant', module: 'ant'
        exclude group: 'org.apache.cxf', module: 'cxf'
        exclude group: 'javax.servlet', module: 'servlet-api'
        exclude group: 'org.mortbay.jetty', module: 'servlet-api'
        // Superceded by governator-api
        exclude group: 'com.netflix.governator', module: 'governator-annotations'

        resolutionStrategy {
            force "com.google.guava:guava:${guavaVersion}"
        }

        // We need to exclude logback as it clashes with other logging engines.
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'ch.qos.logback', module: 'logback-core'

        // Conflicts by SpringBoot
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }

    dependencies {
        compile "org.slf4j:slf4j-api:${slf4jVersion}"
        runtime "org.slf4j:slf4j-log4j12:${slf4jVersion}"

        testCompile "junit:junit-dep:${junitVersion}"
        testCompile "org.mockito:mockito-core:${mockitoVersion}"
        testCompile "org.hamcrest:hamcrest-core:${hamcrestVersion}"
        testCompile "com.jayway.awaitility:awaitility:${awaitilityVersion}"
        testCompile "io.projectreactor:reactor-test:${springReactor}"

        testCompile "org.assertj:assertj-core:${assertjVersion}"
    }

    def processorTarget = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

    test {
        maxParallelForks = processorTarget

        useJUnit {
            excludeCategories 'com.netflix.titus.testkit.junit.category.IntegrationTest', 'com.netflix.titus.testkit.junit.category.IntegrationNotParallelizableTest',
                    'com.netflix.titus.testkit.junit.category.RemoteIntegrationTest'
        }

        reports {
            junitXml.enabled = true
            html.enabled = true
        }

        testLogging {
            events "failed"
            exceptionFormat "full"
            showExceptions true
            showStackTraces true
            showCauses true
        }
    }

    task integrationTest(type: Test) {
        maxParallelForks = processorTarget
        shouldRunAfter test

        if ("excludeMaster".equalsIgnoreCase(integrationTestScope)) {
            exclude 'com/netflix/titus/master/integration/**/*'
        } else if ("onlyMaster1".equalsIgnoreCase(integrationTestScope)) {
            include 'com/netflix/titus/master/integration/**/*'
            exclude 'com/netflix/titus/master/integration/v3/job/**/*'
        } else if ("onlyMaster2".equalsIgnoreCase(integrationTestScope)) {
            include 'com/netflix/titus/master/integration/v3/job/**/*'
            exclude 'com/netflix/titus/master/integration/v3/job/query/*'
        } else if ("onlyMaster3".equalsIgnoreCase(integrationTestScope)) {
            include 'com/netflix/titus/master/integration/v3/job/query/*'
        }

        useJUnit {
            includeCategories 'com.netflix.titus.testkit.junit.category.IntegrationTest'
        }

        reports {
            junitXml.enabled = true
            html.enabled = true
        }

        testLogging {
            events "failed"
            exceptionFormat "full"
            showExceptions true
            showStackTraces true
            showCauses true
        }
    }

    task integrationNotParallelizableTest(type: Test) {
        shouldRunAfter test

        useJUnit {
            includeCategories 'com.netflix.titus.testkit.junit.category.IntegrationNotParallelizableTest'
        }

        reports {
            junitXml.enabled = true
            html.enabled = true
        }

        testLogging {
            events "failed"
            exceptionFormat "full"
            showExceptions true
            showStackTraces true
            showCauses true
        }
    }

    task remoteIntegrationTest(type: Test) {
        maxParallelForks = processorTarget
        shouldRunAfter test

        useJUnit {
            includeCategories 'com.netflix.titus.testkit.junit.category.RemoteIntegrationTest'
        }

        reports {
            junitXml.enabled = true
            html.enabled = true
        }

        testLogging {
            events "failed"
            exceptionFormat "full"
            showExceptions true
            showStackTraces true
            showCauses true
        }
    }

    task testAll {
        dependsOn 'test'
        dependsOn 'integrationTest'
        dependsOn 'integrationNotParallelizableTest'
    }

    task buildScriptDependencies(type: org.gradle.api.tasks.diagnostics.DependencyReportTask) {
        configurations = project.buildscript.configurations
    }

    task dependenciesForAll(type: DependencyReportTask) {}
}



dependencyLock {
    includeTransitives = true
}

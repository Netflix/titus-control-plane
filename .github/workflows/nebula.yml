name: Nebula Build
on:
  push:
    branches:
      - '*'
    tags:
      - v*.*.*
      - v*.*.*-rc.*
  pull_request:

jobs:
  validation:
    name: "Gradle Wrapper Validation"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: gradle/wrapper-validation-action@v1
  multijdk:
    if: |
      github.event_name == 'pull_request' ||
      ((!startsWith(github.ref, 'refs/tags/v')) && github.ref != 'refs/heads/master' && github.ref != 'refs/heads/main')
    needs: validation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # test against latest update of some major Java version(s), as well as specific LTS version(s)
        java: [ 8 ]
    name: Gradle Build without Publish
    steps:
      - uses: actions/checkout@v1
      - name: Setup jdk
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - uses: actions/cache@v1
        id: gradle-cache
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle/dependency-locks/*.lockfile') }}
          restore-keys: |
            - ${{ runner.os }}-gradle-
      - uses: actions/cache@v1
        id: gradle-wrapper-cache
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
          restore-keys: |
            - ${{ runner.os }}-gradlewrapper-
      - name: docker test
        run: docker --help
      - name: Gradle build
        run: ./gradlew build --max-workers 4 --parallel --no-daemon --stacktrace
  integrationTestExcludeMaster:
    if: |
      github.event_name == 'pull_request' ||
      ((!startsWith(github.ref, 'refs/tags/v')) && github.ref != 'refs/heads/master' && github.ref != 'refs/heads/main')
    needs: validation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # test against latest update of some major Java version(s), as well as specific LTS version(s)
        java: [ 8 ]
    name: Integration Tests (excludeMaster)
    steps:
      - uses: actions/checkout@v1
      - name: Setup jdk
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - uses: actions/cache@v1
        id: gradle-cache
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle/dependency-locks/*.lockfile') }}
          restore-keys: |
            - ${{ runner.os }}-gradle-
      - uses: actions/cache@v1
        id: gradle-wrapper-cache
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
          restore-keys: |
            - ${{ runner.os }}-gradlewrapper-
      - name: docker test
        run: docker --help
      - name: Gradle build
        run: ./gradlew -PintegrationTestScope=excludeMaster integrationTest
  integrationTestMaster1:
    if: |
      github.event_name == 'pull_request' ||
      ((!startsWith(github.ref, 'refs/tags/v')) && github.ref != 'refs/heads/master' && github.ref != 'refs/heads/main')
    needs: validation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # test against latest update of some major Java version(s), as well as specific LTS version(s)
        java: [ 8 ]
    name: Integration Tests (master1)
    steps:
      - uses: actions/checkout@v1
      - name: Setup jdk
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - uses: actions/cache@v1
        id: gradle-cache
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle/dependency-locks/*.lockfile') }}
          restore-keys: |
            - ${{ runner.os }}-gradle-
      - uses: actions/cache@v1
        id: gradle-wrapper-cache
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
          restore-keys: |
            - ${{ runner.os }}-gradlewrapper-
      - name: docker test
        run: docker --help
      - name: Gradle build
        run: ./gradlew -PintegrationTestScope=onlyMaster1 integrationTest
  integrationTestMaster2:
    if: |
      github.event_name == 'pull_request' ||
      ((!startsWith(github.ref, 'refs/tags/v')) && github.ref != 'refs/heads/master' && github.ref != 'refs/heads/main')
    needs: validation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # test against latest update of some major Java version(s), as well as specific LTS version(s)
        java: [ 8 ]
    name: Integration Tests (master2)
    steps:
      - uses: actions/checkout@v1
      - name: Setup jdk
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - uses: actions/cache@v1
        id: gradle-cache
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle/dependency-locks/*.lockfile') }}
          restore-keys: |
            - ${{ runner.os }}-gradle-
      - uses: actions/cache@v1
        id: gradle-wrapper-cache
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
          restore-keys: |
            - ${{ runner.os }}-gradlewrapper-
      - name: docker test
        run: docker --help
      - name: Gradle build
        run: ./gradlew -PintegrationTestScope=onlyMaster2 integrationTest
  integrationTestMaster3:
    if: |
      github.event_name == 'pull_request' ||
      ((!startsWith(github.ref, 'refs/tags/v')) && github.ref != 'refs/heads/master' && github.ref != 'refs/heads/main')
    needs: validation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # test against latest update of some major Java version(s), as well as specific LTS version(s)
        java: [ 8 ]
    name: Integration Tests (master 3)
    steps:
      - uses: actions/checkout@v1
      - name: Setup jdk
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - uses: actions/cache@v1
        id: gradle-cache
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle/dependency-locks/*.lockfile') }}
          restore-keys: |
            - ${{ runner.os }}-gradle-
      - uses: actions/cache@v1
        id: gradle-wrapper-cache
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
          restore-keys: |
            - ${{ runner.os }}-gradlewrapper-
      - name: docker test
        run: docker --help
      - name: Gradle build
        run: ./gradlew -PintegrationTestScope=onlyMaster3 integrationTest
  integrationTestNonParallelizable:
    if: |
      github.event_name == 'pull_request' ||
      ((!startsWith(github.ref, 'refs/tags/v')) && github.ref != 'refs/heads/master' && github.ref != 'refs/heads/main')
    needs: validation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # test against latest update of some major Java version(s), as well as specific LTS version(s)
        java: [ 8 ]
    name: Integration Tests (NonParallelizable)
    steps:
      - uses: actions/checkout@v1
      - name: Setup jdk
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - uses: actions/cache@v1
        id: gradle-cache
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle/dependency-locks/*.lockfile') }}
          restore-keys: |
            - ${{ runner.os }}-gradle-
      - uses: actions/cache@v1
        id: gradle-wrapper-cache
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
          restore-keys: |
            - ${{ runner.os }}-gradlewrapper-
      - name: docker test
        run: docker --help
      - name: Gradle build
        run: ./gradlew integrationNotParallelizableTest
  publish:
    if: |
      github.event_name != 'pull_request' &&
      (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    needs: validation
    runs-on: ubuntu-latest
    name: Gradle Build and Publish
    steps:
      - uses: actions/checkout@v1
      - name: Setup jdk 8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - uses: actions/cache@v1
        id: gradle-cache
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle/dependency-locks/*.lockfile') }}
          restore-keys: |
            - ${{ runner.os }}-gradle-
      - uses: actions/cache@v1
        id: gradle-wrapper-cache
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
          restore-keys: |
            - ${{ runner.os }}-gradlewrapper-
      - name: Publish snapshot
        if: (!startsWith(github.ref, 'refs/tags/v'))
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
      - name: Publish candidate
        if: |
          startsWith(github.ref, 'refs/tags/v') &&
          contains(github.ref, '-rc.')
        run: ./gradlew -Prelease.useLastTag=true candidate
        env:
          NETFLIX_OSS_SONATYPE_USERNAME: ${{ secrets.ORG_SONATYPE_USERNAME }}
          NETFLIX_OSS_SONATYPE_PASSWORD: ${{ secrets.ORG_SONATYPE_PASSWORD }}
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
      - name: Publish release
        if: |
          startsWith(github.ref, 'refs/tags/v') &&
          (!contains(github.ref, '-rc.'))
        run: ./gradlew -Prelease.useLastTag=true final
        env:
          NETFLIX_OSS_SONATYPE_USERNAME: ${{ secrets.ORG_SONATYPE_USERNAME }}
          NETFLIX_OSS_SONATYPE_PASSWORD: ${{ secrets.ORG_SONATYPE_PASSWORD }}
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}

import com.opentable.db.postgres.embedded.EmbeddedPostgres

import java.sql.Connection
import java.sql.ResultSet
import java.sql.Statement

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.opentable.components:otj-pg-embedded:0.13.+'
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.19'
    }
}

ext.flywayVersion = '6.5.+'
ext.jooqVersion = '3.13.2'
ext.psql = '42.2.8'

// Begin: Jooq code generation using EmbeddedPostgres database and Flyway migration
ext.dbProfile = null
ext.dbSchemas = null
ext.jdbcUrl = ''
ext.jdbcUser = null
ext.jdbcPassword = null
ext.flyway = null
ext.jooq = null
ext.dataSource = null
ext.pg = null
ext.jdbcPort = -1

def startEmbeddedPostgresDatabase() {
    dbProfile = project.getProperty('dbProfile')

    println 'Resolving RDBS test configuration...'

    def profileFile = new File(System.getenv("HOME"), ".titus-jooq.yaml")
    def useLocal = false
    if (profileFile.exists()) {
        def cfg = new org.yaml.snakeyaml.Yaml().load(profileFile.newInputStream())
        println 'Loaded profiles ' + cfg
        def profileCfg = cfg.profiles[dbProfile]
        if (profileCfg != null) {
            println 'Database profile found: ' + profileCfg
            jdbcPort = 5432
            jdbcUrl = profileCfg.databaseUrl
            jdbcUser = profileCfg.user
            jdbcPassword = profileCfg.password
            useLocal = true
        }
    }

    if (!useLocal) {
        pg = EmbeddedPostgres.start()
        jdbcUser = 'postgres'
        jdbcPassword = 'postgres'
        jdbcPort = pg.getPort()
        jdbcUrl = 'jdbc:postgresql://localhost:' + pg.getPort() + '/postgres'
        println 'Postgres ' + jdbcUrl
        dataSource = pg.getPostgresDatabase()
        // The following code checks we are able to run a test query to the DB
        Connection connection = dataSource.getConnection()
        Statement statement = connection.createStatement()
        ResultSet rs = statement.executeQuery("SELECT 1")
        assert rs.next()
        assert rs.getInt(1) == 1
        println 'Embedded Postgresql DB started on port: ' + jdbcPort
    }
}

task startDb {
    group 'Embedded Postgresql DB'
    description 'Starts an instance of Embedded Postgresql DB'
    doFirst {
        startEmbeddedPostgresDatabase()
    }
}

task stopDb {
    group 'Embedded Postgresql DB'
    description 'Stops a running instance of Embedded Postgresql DB'
    if (pg != null) {
        doLast {
            // If you need the embedded DB to still be running for debugging code generation or DB migration,
            // comment the following lines out so the DB is active. Connect to the port number in the output using your local postgres client.
            // Alternatively, grep the process list (ps) for the word "embedded-pg" to get the postgresql command line arguments.
            // You will need to manually terminate the postgresql instances running locally.
            println 'Stopping embedded Postgresql DB running on port ' + jdbcPort
            if (pg != null) pg.close()
        }
    }
}